// <auto-generated />
using System;
using FeedbackApp.WebApi.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FeedbackApp.WebApi.Migrations
{
    [DbContext(typeof(FeedbackAppDbContext))]
    partial class FeedbackAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Admin", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            UserName = "admin",
                            Email = "admin@gmail.com",
                            Name = "admin",
                            Password = "cc03e747a6afbbcbf8be7668acfebee5"
                        });
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Answer", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("TraineeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("ClassId", "ModuleID", "QuestionID", "TraineeID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("TraineeID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Assignment", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("TrainerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId", "ModuleID", "TrainerID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("TrainerID");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Enrollment", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("TraineeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClassId", "TraineeId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeFeedbackID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("AdminID");

                    b.HasIndex("TypeFeedbackID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Feedback_Question", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Feedback_Questions");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FeedbackEndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedbackStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ModuleID");

                    b.HasIndex("AdminID");

                    b.HasIndex("FeedbackID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("TopicID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("TopicID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            Name = "Training program & content (nội dung đào tạo)"
                        },
                        new
                        {
                            TopicId = 2,
                            Name = "Trainer/Coach"
                        },
                        new
                        {
                            TopicId = 3,
                            Name = "Cource organization (tổ chức khóa học)"
                        },
                        new
                        {
                            TopicId = 4,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Trainee", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName");

                    b.ToTable("Trainees");

                    b.HasData(
                        new
                        {
                            UserName = "trainee",
                            Email = "admin@gmail.com",
                            IsActive = true,
                            Name = "admin",
                            Password = "cc03e747a6afbbcbf8be7668acfebee5"
                        });
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Trainee_Assignment", b =>
                {
                    b.Property<string>("RegistrationCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TraineeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RegistrationCode", "TraineeId");

                    b.ToTable("Trainee_Assignments");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Trainee_Comment", b =>
                {
                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("TraineeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassID", "ModuleId", "TraineeID");

                    b.ToTable("Trainee_Comments");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Trainer", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsReceiveNotification")
                        .HasColumnType("bit");

                    b.Property<int>("IsSkill")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserName");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            UserName = "trainer",
                            Email = "admin@gmail.com",
                            IsActive = true,
                            IsReceiveNotification = false,
                            IsSkill = 0,
                            Name = "admin",
                            Password = "cc03e747a6afbbcbf8be7668acfebee5"
                        });
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.TypeFeedback", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("TypeFeedbacks");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            IsDeleted = false,
                            Name = "InComplete"
                        },
                        new
                        {
                            TypeId = 2,
                            IsDeleted = false,
                            Name = "Complete"
                        });
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Answer", b =>
                {
                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Class", "Class")
                        .WithMany("Answers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Module", "Module")
                        .WithMany("Answers")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Trainee", "Trainee")
                        .WithMany("Answers")
                        .HasForeignKey("TraineeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Module");

                    b.Navigation("Question");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Assignment", b =>
                {
                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Class", "Class")
                        .WithMany("Assignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Module", "Module")
                        .WithMany("Assignments")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Trainer", "Trainer")
                        .WithMany("Assignments")
                        .HasForeignKey("TrainerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Module");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Enrollment", b =>
                {
                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Trainee", "Trainee")
                        .WithMany("Enrollments")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Feedback", b =>
                {
                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Admin", "Admin")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AdminID");

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.TypeFeedback", "TypeFeedback")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TypeFeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("TypeFeedback");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Feedback_Question", b =>
                {
                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Feedback", "Feedback")
                        .WithMany("Feedback_Questions")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Question", "Question")
                        .WithMany("Feedback_Questions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Module", b =>
                {
                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Admin", "Admin")
                        .WithMany("Modules")
                        .HasForeignKey("AdminID");

                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Feedback", "Feedback")
                        .WithMany("Modules")
                        .HasForeignKey("FeedbackID");

                    b.Navigation("Admin");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Question", b =>
                {
                    b.HasOne("FeedbackApp.WebApi.Data.Entities.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Admin", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Class", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Feedback", b =>
                {
                    b.Navigation("Feedback_Questions");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Module", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Feedback_Questions");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Topic", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Trainee", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.Trainer", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("FeedbackApp.WebApi.Data.Entities.TypeFeedback", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
